# <gh>
name: Probe chat Github Action

on:
  workflow_call:
    inputs:
      command_prefix:
        description: "The prefix required on comments to trigger the AI (e.g., /probe, /ai, etc)"
        default: "/probe"
        required: true
        type: string
      default_probe_chat_command:
        description: "The default probe-chat command if PROBE_CHAT_COMMAND secret is not set"
        required: false
        default: "npx -y @buger/probe-chat@latest"
        type: string
    secrets:
      PROBE_CHAT_COMMAND:
        required: false
        description: "Optional command for probe chat"
      ANTHROPIC_API_KEY:
        required: false
        description: "API key for Anthropic service"
      OPENAI_API_KEY:
        required: false
        description: "API key for OpenAI service"
      GOOGLE_API_KEY:
        required: false
        description: "API key for Google service"
      ANTHROPIC_API_URL:
        required: false
        description: "Custom API URL for Anthropic service"
      OPENAI_API_URL:
        required: false
        description: "Custom API URL for OpenAI service"
      GOOGLE_API_URL:
        required: false
        description: "Custom API URL for Google service"
      LLM_BASE_URL:
        required: false
        description: "Base URL for the LLM service"
      MODEL_NAME:
        required: false
        description: "Name of the model to use"
      FORCE_PROVIDER:
        required: false
        description: "Force the use of a specific provider"

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  process_comment:
    if: >
      startsWith(github.event.comment.body, inputs.command_prefix) &&
      github.event.issue.number != null &&
      github.event.comment.id != null
    runs-on: ubuntu-latest
    outputs:
      response_body: ${{ steps.read_response.outputs.response }}
      issue_number: ${{ steps.set_context_ids.outputs.issue_number }}
      probe_succeeded: ${{ steps.probe.outcome == 'success' }}
      context_type: ${{ steps.format.outputs.context_type }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Detect Languages ---
      - name: Detect Project Languages
        id: detect_languages
        run: |
          # Initialize flags
          NODE_FOUND=false
          GO_FOUND=false
          RUST_FOUND=false
          PYTHON_FOUND=false

          # Check for dependency files
          if [ -f "package.json" ]; then
            echo "Detected Node.js (package.json)"
            NODE_FOUND=true
          fi
          if [ -f "go.mod" ]; then
            echo "Detected Go (go.mod)"
            GO_FOUND=true
          fi
          if [ -f "Cargo.toml" ]; then
            echo "Detected Rust (Cargo.toml)"
            RUST_FOUND=true
          fi
          if [ -f "requirements.txt" ]; then
            echo "Detected Python (requirements.txt)"
            PYTHON_FOUND=true
          fi

          # Set outputs for use in later steps
          echo "node_found=$NODE_FOUND" >> $GITHUB_OUTPUT
          echo "go_found=$GO_FOUND" >> $GITHUB_OUTPUT
          echo "rust_found=$RUST_FOUND" >> $GITHUB_OUTPUT
          echo "python_found=$PYTHON_FOUND" >> $GITHUB_OUTPUT

      # --- Node.js Setup and Caching (Conditional) ---
      - name: Set up Node.js
        if: steps.detect_languages.outputs.node_found == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm' # Caches ~/.npm based on package-lock.jsonà·€

      # --- Go Setup and Caching (Conditional) ---
      - name: Set up Go
        if: steps.detect_languages.outputs.go_found == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          # Go caching is automatic in setup-go@v3.2+

      # --- Rust Setup and Caching (Conditional) ---
      - name: Set up Rust
        if: steps.detect_languages.outputs.rust_found == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        if: steps.detect_languages.outputs.rust_found == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # --- Python Setup and Caching (Conditional) ---
      - name: Set up Python
        if: steps.detect_languages.outputs.python_found == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'

      # --- Install Dependencies ---
      - name: Install Project Dependencies
        run: |
          # Node.js - Check for package.json
          if [ -f "package.json" ]; then
            echo "Found package.json - Installing Node.js dependencies..."
            npm install
          fi

          # Go - Check for go.mod
          if [ -f "go.mod" ]; then
            echo "Found go.mod - Installing Go dependencies..."
            go mod download
          fi

          # Rust - Check for Cargo.toml
          if [ -f "Cargo.toml" ]; then
            echo "Found Cargo.toml - Installing Rust dependencies..."
            cargo build --quiet
          fi

          # Python - Check for requirements.txt
          if [ -f "requirements.txt" ]; then
            echo "Found requirements.txt - Installing Python dependencies..."
            pip install -r requirements.txt
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install jq, perl and Verify gh
        run: |
          sudo apt-get update && sudo apt-get install -y jq perl --no-install-recommends
          gh --version

      - name: Set Issue Number and Comment ID Output
        id: set_context_ids
        run: |
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "comment_id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT
          echo "Context ID (Issue/PR Number): ${{ github.event.issue.number }}, Comment ID: ${{ github.event.comment.id }}"

      - name: Add 'eyes' reaction to comment
        id: add_reaction
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          COMMENT_ID: ${{ steps.set_context_ids.outputs.comment_id }}
        run: |
          echo "Adding ðŸ‘€ reaction to comment ID ${COMMENT_ID}..."
          gh api --method POST -H "Accept: application/vnd.github+json" "/repos/${REPO}/issues/comments/${COMMENT_ID}/reactions" -f content='eyes' --silent || echo "::warning::Failed reaction."

      - name: Determine Context, Fetch Comments, Format Input
        id: format
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMAND_PREFIX: ${{ inputs.command_prefix }}
          REPO: ${{ github.repository }}
        run: |
          # --- Initialization ---
          echo "::group::Initialization and User Request Extraction"
          shopt -s extglob
          set -e
          ISSUE_OR_PR_NUMBER=${{ steps.set_context_ids.outputs.issue_number }}
          RAW_COMMENT_BODY="${{ github.event.comment.body }}"
          GITHUB_API_ARGS_VERBOSE=(-H "Accept: application/vnd.github+json")

          USER_REQUEST_BODY_RAW="${RAW_COMMENT_BODY#${COMMAND_PREFIX}}"
          USER_REQUEST_BODY_RAW="${USER_REQUEST_BODY_RAW##*( )}"
          USER_REQUEST_BODY_RAW="${USER_REQUEST_BODY_RAW%%*( )}"
          USER_REQUEST_BODY="$USER_REQUEST_BODY_RAW"
          COMMENTS_XML=""
          echo "User request extracted: [${USER_REQUEST_BODY:0:100}...]"
          echo "::endgroup::"

          # --- Determine Context ---
          echo "::group::Determine Context Type"
          CONTEXT_TYPE="issue"
          echo "Detecting context for #$ISSUE_OR_PR_NUMBER in $REPO"
          if gh api "${GITHUB_API_ARGS_VERBOSE[@]}" "/repos/${REPO}/pulls/$ISSUE_OR_PR_NUMBER" --jq .url > /dev/null 2>&1; then
             CONTEXT_TYPE="pr"
             echo "Context: PR"
          else
             EXIT_CODE=$?
             echo "PR API check failed ($EXIT_CODE). Assuming: Issue"
             if ! gh api "${GITHUB_API_ARGS_VERBOSE[@]}" "/repos/${REPO}/issues/$ISSUE_OR_PR_NUMBER" --jq .url > /dev/null 2>&1; then
               echo "::warning::Issue API check also failed ($?). Check permissions/number."
             fi
             CONTEXT_TYPE="issue"
          fi
          FINAL_CONTEXT_TYPE=$CONTEXT_TYPE
          echo "Final Context Type: $FINAL_CONTEXT_TYPE"
          echo "::endgroup::"

          # --- Fetch Comments and Context Details ---
          echo "::group::Fetch Comments and Context Details"
          # --- Standard Comments ---
          echo "Fetching standard comments..."
          STD_COMMENTS_JSON=$(gh api "${GITHUB_API_ARGS_VERBOSE[@]}" "/repos/${REPO}/issues/$ISSUE_OR_PR_NUMBER/comments" --paginate || echo "FETCH_FAILED")

          if [[ "$STD_COMMENTS_JSON" == "FETCH_FAILED" || -z "$STD_COMMENTS_JSON" ]]; then
              echo "::warning::Failed to fetch standard comments JSON or received empty response."
          else
              echo "$STD_COMMENTS_JSON" | jq -e '. | type == "array"' > /dev/null 2>&1
              IS_JSON_ARRAY_EXIT_CODE=$?
              if [[ $IS_JSON_ARRAY_EXIT_CODE -eq 0 ]]; then
                  TSV_OUTPUT=$(echo "$STD_COMMENTS_JSON" | jq -r '.[] | [.user.login // "unknown", .created_at // "N/A", .body // ""] | @tsv' 2> jq_std_error.log)
                  JQ_EXIT_CODE=$?
                  if [[ $JQ_EXIT_CODE -eq 0 ]]; then
                      if [[ -n "$TSV_OUTPUT" ]]; then
                          echo "Processing standard comments..."
                          while IFS=$'\t' read -r login created_at body; do
                              [[ -n "$login" || -n "$created_at" || -n "$body" ]] || continue
                              # NO XML ESCAPING
                              COMMENTS_XML="${COMMENTS_XML}<comment type=\"issue\"><author>$login</author><timestamp>$created_at</timestamp><content>$body</content></comment>"
                          done <<< "$TSV_OUTPUT"
                      else
                          echo "Standard comments JSON valid, but no comments found or jq produced empty TSV."
                      fi
                  else
                      echo "::warning::jq failed processing standard comments (exit code $JQ_EXIT_CODE). Error log:"
                      cat jq_std_error.log
                  fi
              else
                  echo "::warning::Fetched standard comments data is not a valid JSON array."
              fi
          fi
          echo "Standard comments processed. Current XML length: ${#COMMENTS_XML}"

          # --- Context Specific ---
          CONTEXT_DETAILS_XML=""
          DIFF_XML=""
          PROMPT_INSTRUCTION=""

          if [[ "$FINAL_CONTEXT_TYPE" == "pr" ]]; then
            echo "Fetching PR specific data..."
            PR_DATA=$(gh pr view "$ISSUE_OR_PR_NUMBER" --json title,body --repo "${REPO}" 2>/dev/null || echo 'FETCH_FAILED')
            if [[ "$PR_DATA" == "FETCH_FAILED" ]]; then
              echo "::warning::Failed PR details fetch."
              PR_TITLE="Error"
              PR_BODY="Error"
            else
              # NO XML ESCAPING
              PR_TITLE=$(echo "$PR_DATA" | jq -r .title)
              PR_BODY=$(echo "$PR_DATA" | jq -r .body)
            fi

            # --- Filtered Diff Logic ---
            echo "Fetching and filtering PR diff..."
            # Define allowed file patterns for gh pr diff pathspec
            ALLOWED_PATTERNS=(
                '*.go'
                '*.js' '*.ts' '*.jsx' '*.tsx'
                '*.rs'
                '*.java'
                '*.c' '*.h' '*.cpp' '*.hpp'
                '*.py'
                '*.cs'
                '*.php'
                '*.rb'
                '*.swift'
                '*.kt' '*.kts'
                '*.scala'
                '*.sh'
                '*.pl' '*.pm'
                '*.lua'
                '*.sql'
                '*.md'
                '*.yaml' '*.yml'
                '*.json'
                # Add non-code files that are useful context
                'Dockerfile'
                'Makefile'
                '.dockerignore'
                '.gitignore'
                'go.mod'
                'package.json' 'package-lock.json'
                'requirements.txt' 'Pipfile' 'pyproject.toml'
                'Cargo.toml' 'Cargo.lock'
                'pom.xml' 'build.gradle' 'settings.gradle'
                'composer.json'
                'Gemfile' 
                # Config files
                '.*rc' # e.g., .bashrc, .zshrc
                '*.conf'
                '*.cfg'
                '*.ini'
                '*.toml'
                '*.properties'
                # Documentation
                'README.*' # README.md, README.txt etc.
                'LICENSE*'
                'CONTRIBUTING.*'
                'CHANGELOG.*'
                '*.rst'
                '*.adoc'
            )

            # Fetch the initial diff filtered by extension using pathspecs
            RAW_DIFF_CONTENT=$(gh pr diff "$ISSUE_OR_PR_NUMBER" --repo "${REPO}" -- "${ALLOWED_PATTERNS[@]}" 2> pr_diff_stderr.log || echo "FETCH_FAILED")
            PR_DIFF_EXIT_CODE=$?

            FILTERED_PR_DIFF="" # Renamed variable to avoid confusion with escaping step

            if [[ "$RAW_DIFF_CONTENT" == "FETCH_FAILED" ]] || [[ $PR_DIFF_EXIT_CODE -ne 0 ]]; then
              echo "::warning::Failed PR diff fetch (Exit: $PR_DIFF_EXIT_CODE)."
              if [[ -s pr_diff_stderr.log ]]; then
                 echo "Stderr from gh pr diff:"
                 cat pr_diff_stderr.log
              fi
              FILTERED_PR_DIFF="<!-- Error fetching diff -->" # No escaping
            elif [[ -z "$RAW_DIFF_CONTENT" ]]; then
              echo "No relevant file changes found matching patterns."
              FILTERED_PR_DIFF="<!-- No relevant file changes found -->" # No escaping
            else
              echo "Raw diff fetched (${#RAW_DIFF_CONTENT} bytes). Filtering minified files..."

              # Pipe the raw diff to Perl, which reads the script from STDIN via the here-doc
              FILTERED_PR_DIFF=$(echo "$RAW_DIFF_CONTENT" | perl -ne '
                BEGIN {
                    $chunk = "";          # Stores the lines of the current diff chunk
                    $print_chunk = 1;    # Flag: 1 to print, 0 to skip
                    $max_len = 500;      # Max allowed line length for first 2 lines of content
                }
                # Match the start of a diff for a file
                if (/^diff --git a\/(?:.*?\/)?(?:.+)\s+b\/(?:.*?\/)?(.+)$/) {
                    # Print the previous chunk if it was marked for printing
                    print $chunk if $chunk ne "" && $print_chunk;

                    # Start processing the new chunk
                    $chunk = $_;         # Start the new chunk with the diff --git line
                    $print_chunk = 1;    # Assume printable by default
                    my $b_path = $1;     # Extract the file path (relative to repo root)

                    # Skip check for /dev/null (means file added or deleted)
                    if ($b_path eq "/dev/null") {
                         $print_chunk = 1;
                    }
                    # Skip check for files known not to be minified code/text
                    elsif ($b_path =~ m/\.(lock|sum|mod|toml|cfg|ini|properties|yaml|yml|json|md|rst|adoc|txt|conf)$/i ||
                           $b_path =~ m/(Makefile|Dockerfile|LICENSE|README|CONTRIBUTING|CHANGELOG)/i ||
                           $b_path =~ m/\.(gitignore|dockerignore|.*rc)$/ ) {
                        $print_chunk = 1; # Assume these are not minified
                    }
                    # Check the content of other files
                    elsif (! -e $b_path) {
                         # File path exists in diff but not in checkout
                         warn "Warning: File $b_path from diff not found in checkout, including chunk.";
                         $print_chunk = 1;
                    } else {
                         # File exists, check its first two lines for length
                         if (open my $fh, "<", $b_path) {
                             my $lines_read = 0;
                             while (my $line = <$fh>) {
                                 $lines_read++;
                                 chomp $line;
                                 # Allow long lines if they contain common long tokens like URLs, paths, base64 chunks
                                 if (length($line) > $max_len && $line !~ m{(https?://\S+|/\S+|[a-zA-Z0-9+/=]{20,})}) {
                                     warn "Info: Filtering chunk for $b_path (line $lines_read length > $max_len and no common long token detected)";
                                     $print_chunk = 0; # Mark chunk NOT to be printed
                                     last; # Stop reading file
                                 }
                                 last if $lines_read >= 2; # Only check first two lines
                             }
                             close $fh;
                         } else {
                             # Could not open the file for checking
                             warn "Warning: Could not open $b_path to check for minification, including chunk.";
                             $print_chunk = 1; # Include if we cannot check
                         }
                    }
                } else {
                    # Its not a "diff --git" line, just add it to the current chunk
                    $chunk .= $_;
                }

                # At the very end of the input, print the last chunk if needed
                END {
                    print $chunk if $chunk ne "" && $print_chunk;
                }
              ' 2> filter_stderr.log) # End of perl command, its output is captured

              if [[ -s filter_stderr.log ]]; then
                 echo "Filter script warnings/info:"
                 cat filter_stderr.log
              fi

              if [[ -z "$FILTERED_PR_DIFF" ]] && [[ -n "$RAW_DIFF_CONTENT" ]]; then
                  # If filtering resulted in empty diff, but raw wasn't empty
                  echo "All diff chunks were filtered out (likely minified or excluded)."
                  FILTERED_PR_DIFF="<!-- Diff contained only files filtered out (e.g., minified files) -->" # No escaping
              elif [[ -z "$FILTERED_PR_DIFF" ]]; then
                   # Filtered diff is empty, and raw diff was likely also empty or only headers
                   echo "Filtered diff is empty (or only contained filtered files)."
                   FILTERED_PR_DIFF="<!-- Filtered diff is empty -->" # No escaping
              else
                   echo "Filtering complete. Final diff size: ${#FILTERED_PR_DIFF} bytes."
                   # The filtered diff is already in FILTERED_PR_DIFF, no further action needed here
              fi
            fi
            # --- End Filtered Diff Logic ---

            CONTEXT_DETAILS_XML="<details><title>$PR_TITLE</title><body>$PR_BODY</body></details>"
            # Use the filtered (but not escaped) diff content
            DIFF_XML="<diff>$FILTERED_PR_DIFF</diff>"

            # --- PR Review Comments ---
            echo "Fetching PR review comments..."
            REVIEW_COMMENTS_JSON=$(gh api "${GITHUB_API_ARGS_VERBOSE[@]}" "/repos/${REPO}/pulls/$ISSUE_OR_PR_NUMBER/comments" --paginate || echo "FETCH_FAILED")
            if [[ "$REVIEW_COMMENTS_JSON" == "FETCH_FAILED" || -z "$REVIEW_COMMENTS_JSON" ]]; then
                echo "::warning::Failed to fetch PR review comments JSON or received empty response."
            else
                echo "$REVIEW_COMMENTS_JSON" | jq -e '. | type == "array"' > /dev/null 2>&1
                IS_JSON_ARRAY_EXIT_CODE=$?
                if [[ $IS_JSON_ARRAY_EXIT_CODE -eq 0 ]]; then
                    TSV_OUTPUT=$(echo "$REVIEW_COMMENTS_JSON" | jq -r '.[] | [.user.login // "unknown", .created_at // "N/A", .body // "", .path // "unknown", .diff_hunk // "", (.line // .original_line // "N/A")] | @tsv' 2> jq_rev_com_error.log)
                    JQ_EXIT_CODE=$?
                    if [[ $JQ_EXIT_CODE -eq 0 ]]; then
                         if [[ -n "$TSV_OUTPUT" ]]; then
                            echo "Processing review comments..."
                            while IFS=$'\t' read -r login created_at body path diff_hunk line; do
                               [[ -n "$login" || -n "$created_at" || -n "$body" ]] || continue
                               # NO XML ESCAPING
                               COMMENTS_XML="${COMMENTS_XML}<comment type=\"review_comment\" file=\"$path\" line=\"$line\"><author>$login</author><timestamp>$created_at</timestamp><diff_hunk>$diff_hunk</diff_hunk><content>$body</content></comment>"
                            done <<< "$TSV_OUTPUT"
                         else
                            echo "Review comments JSON valid, but no comments found or jq produced empty TSV."
                         fi
                    else
                         echo "::warning::jq failed processing review comments (exit code $JQ_EXIT_CODE). Error log:"
                         cat jq_rev_com_error.log
                    fi
                else
                     echo "::warning::Fetched review comments data is not a valid JSON array."
                fi
            fi
            echo "Review comments processed. Current XML length: ${#COMMENTS_XML}"

            # --- PR Reviews (Bodies) ---
            echo "Fetching PR reviews..."
            REVIEWS_JSON=$(gh api "${GITHUB_API_ARGS_VERBOSE[@]}" "/repos/${REPO}/pulls/$ISSUE_OR_PR_NUMBER/reviews" --paginate || echo "FETCH_FAILED")
            if [[ "$REVIEWS_JSON" == "FETCH_FAILED" || -z "$REVIEWS_JSON" ]]; then
                 echo "::warning::Failed to fetch PR reviews JSON or received empty response."
            else
                 echo "$REVIEWS_JSON" | jq -e '. | type == "array"' > /dev/null 2>&1
                 IS_JSON_ARRAY_EXIT_CODE=$?
                 if [[ $IS_JSON_ARRAY_EXIT_CODE -eq 0 ]]; then
                     TSV_OUTPUT=$(echo "$REVIEWS_JSON" | jq -r '.[] | select(.body != null and .body != "") | [.user.login // "unknown", .submitted_at // "N/A", .body, .state // "N/A"] | @tsv' 2> jq_rev_error.log)
                     JQ_EXIT_CODE=$?
                     if [[ $JQ_EXIT_CODE -eq 0 ]]; then
                         if [[ -n "$TSV_OUTPUT" ]]; then
                             echo "Processing review bodies..."
                             while IFS=$'\t' read -r login submitted_at body state; do
                                [[ -n "$login" || -n "$submitted_at" || -n "$body" ]] || continue
                                # NO XML ESCAPING
                                COMMENTS_XML="${COMMENTS_XML}<comment type=\"review_body\" state=\"$state\"><author>$login</author><timestamp>$submitted_at</timestamp><content>$body</content></comment>"
                             done <<< "$TSV_OUTPUT"
                         else
                             echo "Review JSON valid, but no review bodies with content found or jq produced empty TSV."
                         fi
                     else
                          echo "::warning::jq failed processing review bodies (exit code $JQ_EXIT_CODE). Error log:"
                          cat jq_rev_error.log
                     fi
                 else
                      echo "::warning::Fetched reviews data is not a valid JSON array."
                 fi
            fi
            echo "Review bodies processed. Current XML length: ${#COMMENTS_XML}"

            PROMPT_INSTRUCTION="You are an AI assistant analyzing a GitHub Pull Request. Answer user questions contextually based on the provided details, comments, and code changes (diff). The diff includes relevant programming, config and documentation files but excludes minified files based on line length heuristics."

          elif [[ "$FINAL_CONTEXT_TYPE" == "issue" ]]; then
            echo "Fetching Issue specific data..."
            ISSUE_DATA=$(gh issue view "$ISSUE_OR_PR_NUMBER" --json title,body --repo "${REPO}" 2>/dev/null || echo 'FETCH_FAILED')
            if [[ "$ISSUE_DATA" == "FETCH_FAILED" ]]; then
              echo "::warning::Failed Issue details fetch."
              ISSUE_TITLE="Error"
              ISSUE_BODY="Error"
            else
              # NO XML ESCAPING
              ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r .title)
              ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r .body)
            fi
            CONTEXT_DETAILS_XML="<details><title>$ISSUE_TITLE</title><body>$ISSUE_BODY</body></details>"
            DIFF_XML="" # No diff for issues
            PROMPT_INSTRUCTION="You are an AI assistant analyzing a GitHub Issue. Answer user questions contextually based on the provided details and comments."
          fi
          echo "::endgroup::"

          # --- Assemble Final Prompt ---
          echo "::group::Assemble Final Prompt & Set Outputs"
          # Use raw values, NO XML ESCAPING
          USER_LOGIN="${{ github.event.comment.user.login }}"
          TIMESTAMP="${{ github.event.comment.created_at }}"

          FORMATTED_PROMPT="<github_context type=\"$FINAL_CONTEXT_TYPE\" number=\"$ISSUE_OR_PR_NUMBER\">
            ${CONTEXT_DETAILS_XML}
            ${DIFF_XML}
            <comments>${COMMENTS_XML}</comments>
            <user_request author=\"${USER_LOGIN}\" timestamp=\"${TIMESTAMP}\">${USER_REQUEST_BODY}</user_request>
            </github_context>

            ${PROMPT_INSTRUCTION}"
          if [ ${#FORMATTED_PROMPT} -lt 200 ]; then
            echo "::warning::Formatted prompt seems short."
          fi
          echo "Final prompt assembled. Length: ${#FORMATTED_PROMPT}"

          PROMPT_FILENAME="formatted_prompt.txt"
          echo "$FORMATTED_PROMPT" > "$PROMPT_FILENAME"
          echo "Prompt written to $PROMPT_FILENAME"

          echo "Setting step outputs..."
          echo "context_type=${FINAL_CONTEXT_TYPE}" >> "$GITHUB_OUTPUT"
          echo "formatted_prompt_file=${PROMPT_FILENAME}" >> "$GITHUB_OUTPUT"
          echo "Outputs set."
          echo "::endgroup::"

      - name: Run probe-chat
        id: probe
        env:
          # Keep other necessary env vars
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          ANTHROPIC_API_URL: ${{ secrets.ANTHROPIC_API_URL }}
          OPENAI_API_URL: ${{ secrets.OPENAI_API_URL }}
          GOOGLE_API_URL: ${{ secrets.GOOGLE_API_URL }}
          LLM_BASE_URL: ${{ secrets.LLM_BASE_URL }}
          MODEL_NAME: ${{ secrets.MODEL_NAME }}
          FORCE_PROVIDER: ${{ secrets.FORCE_PROVIDER }}
        run: |
          set -o pipefail # Fail if any command in the pipe fails
          PROMPT_FILE="${{ steps.format.outputs.formatted_prompt_file }}" # Get filename from previous step output
          # Determine the command using the output from the 'determine_command' step
          COMMAND_TO_RUN="${{ steps.determine_command.outputs.command }}"
          RESPONSE_FILE="response.txt"
          ERROR_LOG="error.log"

          # Check if PROMPT_FILE exists and is not empty
          if [ ! -s "$PROMPT_FILE" ]; then
            echo "::error::Prompt file '$PROMPT_FILE' not found or is empty." >&2
            echo "ðŸ¤– **Error:** Internal error - prompt file missing or empty." > "$RESPONSE_FILE"
            exit 1
          fi

          # Debug info
          echo "Prompt file: $PROMPT_FILE"
          echo "Prompt file size: $(wc -c < "$PROMPT_FILE") bytes"
          echo "Command to run: $COMMAND_TO_RUN"
          echo "Running probe-chat..."

          # Pipe the *content* of the file directly to the command's stdin
          cat "$PROMPT_FILE" | $COMMAND_TO_RUN > "$RESPONSE_FILE" 2> "$ERROR_LOG"
          EXIT_CODE=${PIPESTATUS[1]} # Get exit code of the right-most command in the pipe ($COMMAND_TO_RUN)

          # Handle the exit code (keep your existing logic here)
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::probe-chat failed ($EXIT_CODE)." >&2
            if [ -s "$ERROR_LOG" ]; then
              echo "--- stderr ---" >&2
              cat "$ERROR_LOG" >&2
              echo "--- end stderr ---" >&2
            fi
            if [ ! -s "$RESPONSE_FILE" ]; then
              # If probe-chat failed AND didn't write anything, provide a generic error.
              # If it did write something (e.g., its own error message), let that stand.
               echo "ðŸ¤– **Error:** AI command failed (Exit code: $EXIT_CODE)." > "$RESPONSE_FILE"
            fi
             # It's often better to exit with the actual code from the tool
             # exit $EXIT_CODE
             # Or just ensure the step fails if the tool fails
             exit 1 # Ensure the step fails in GH Actions UI
          fi

          echo "probe-chat finished successfully."
          if [ ! -s "$RESPONSE_FILE" ]; then
            echo "::warning::probe-chat produced empty response."
            echo "ðŸ¤– AI generated no response." > "$RESPONSE_FILE"
          fi

      - name: Read Response or Error and Format Output
        if: always()
        id: read_response
        env:
          COMMAND_PREFIX: ${{ inputs.command_prefix }}
        run: |
          RESPONSE_CONTENT=$(cat response.txt 2>/dev/null || echo "")
          ERROR_LOG_CONTENT=$(cat error.log 2>/dev/null || echo "")
          FINAL_BODY=""
          FOOTER_TEMPLATE="\n\n-----\n*Tip: Start comment with \`%s <request>\`.*\n*Built by [probe](https://probeai.dev)*"
          printf -v FOOTER "$FOOTER_TEMPLATE" "$COMMAND_PREFIX"

          if [[ "${{ steps.probe.outcome }}" == "success" ]]; then
            if [[ -n "${RESPONSE_CONTENT// }" ]]; then
              FINAL_BODY="${RESPONSE_CONTENT}${FOOTER}"
            else
              FINAL_BODY="ðŸ¤– Processing succeeded, AI response empty.${FOOTER}"
            fi
          else
            ERROR_MESSAGE="ðŸ¤– **Error:** AI interaction failed."
            if [[ "${{ steps.format.outcome }}" == "failure" ]] || [[ "${{ steps.read_prompt_file.outcome }}" == "failure" ]]; then
              ERROR_MESSAGE="ðŸ¤– **Error:** Failed during context/prompt prep. Check logs."
            elif [[ -n "${RESPONSE_CONTENT// }" ]] && echo "$RESPONSE_CONTENT" | grep -q "ðŸ¤– **Error:**"; then
              ERROR_MESSAGE="${RESPONSE_CONTENT}"
            elif [[ -n "${ERROR_LOG_CONTENT// }" ]]; then
              ERROR_DETAILS=$(head -c 1000 <<< "$ERROR_LOG_CONTENT")
              if [[ ${#ERROR_LOG_CONTENT} -gt 1000 ]]; then
                ERROR_DETAILS="${ERROR_DETAILS}\n...(truncated)"
              fi
              ERROR_MESSAGE="${ERROR_MESSAGE}\n\n**Details (stderr):**\n\`\`\`\n${ERROR_DETAILS}\n\`\`\`"
            else
              ERROR_MESSAGE="${ERROR_MESSAGE} No details. Check 'Run probe-chat' logs (outcome: ${{ steps.probe.outcome }})."
            fi
            FINAL_BODY="${ERROR_MESSAGE}${FOOTER}"
          fi

          echo "Final response body prep'd. Length: ${#FINAL_BODY}"
          {
            echo "response<<EOF_RESPONSE_MARKER"
            echo "$FINAL_BODY"
            echo "EOF_RESPONSE_MARKER"
          } >> "$GITHUB_OUTPUT"

  post_response:
    if: needs.process_comment.result != 'skipped'
    runs-on: ubuntu-latest
    needs: [process_comment]
    steps:
      - name: Post Response Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ needs.process_comment.outputs.issue_number }}
          body: ${{ needs.process_comment.outputs.response_body }}
          reactions: ${{ needs.process_comment.outputs.probe_succeeded == 'true' && '+1' || '-1' }}

# </gh>
