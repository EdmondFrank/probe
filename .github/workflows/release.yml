name: Build and Release Probe Binary

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v1.1.0, etc.
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g. v1.2.3)"
        required: false
        type: string

permissions:
  contents: write # Required to upload release assets

jobs:
  build-and-release:
    name: Build and Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            binary_ext: ""
            archive_ext: "tar.gz"
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_ext: ""
            archive_ext: "tar.gz"
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_ext: ""
            archive_ext: "tar.gz"
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_ext: ".exe"
            archive_ext: "zip"
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            binary_ext: ""
            archive_ext: "tar.gz"

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Rust toolchain
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt, clippy

      # Setup Rust cache
      - name: Setup Rust cache
        uses: actions/cache@v4
        timeout-minutes: 5
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('rust-toolchain', 'rust-toolchain.toml') || 'stable' }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Configure APT sources for arm64
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo bash -c 'cat > /etc/apt/sources.list << EOF
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu jammy-security main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted universe multiverse
          EOF'

      - name: Setup cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu pkg-config libssl-dev:arm64 libc6-dev-arm64-cross
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV

      # Build the Rust project
      - name: Build Release
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-msvc" ]]; then
            # For Windows, use static linking of the C++ runtime
            mkdir -p .cargo
            echo '[target.x86_64-pc-windows-msvc]' > .cargo/config.toml
            echo 'rustflags = ["-C", "target-feature=+crt-static", "-C", "link-args=/DEBUG:NONE", "-C", "link-args=/NOLOGO"]' >> .cargo/config.toml
            cargo build --release --target ${{ matrix.target }}
          else
            # For other platforms, use the default build
            cargo build --release --target ${{ matrix.target }}
          fi

      # Install zip on Windows
      - name: Install zip on Windows
        if: runner.os == 'Windows'
        run: |
          choco install zip -y

      # Package the binary into an archive
      - name: Package Binary
        shell: bash
        run: |
          BINARY_NAME="probe"
          # Determine version from tag or workflow_dispatch input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          ARCHIVE_NAME="$BINARY_NAME-${VERSION}-${{ matrix.target }}"
          mkdir -p "$ARCHIVE_NAME"

          # Copy binary
          cp "target/${{ matrix.target }}/release/$BINARY_NAME${{ matrix.binary_ext }}" "$ARCHIVE_NAME/"

          # Copy documentation and license files
          cp README.md "$ARCHIVE_NAME/" || true
          cp LICENSE "$ARCHIVE_NAME/" || true
          cp ABOUT.MD "$ARCHIVE_NAME/" || true

          # Create archive
          if [ "${{ matrix.archive_ext }}" = "tar.gz" ]; then
            tar -czf "$ARCHIVE_NAME.tar.gz" "$ARCHIVE_NAME"
            echo "ASSET=$ARCHIVE_NAME.tar.gz" >> $GITHUB_ENV
          elif [ "${{ matrix.archive_ext }}" = "zip" ]; then
            zip -r "$ARCHIVE_NAME.zip" "$ARCHIVE_NAME"
            echo "ASSET=$ARCHIVE_NAME.zip" >> $GITHUB_ENV
          fi

          # Generate SHA256 checksum
          if [ "${{ runner.os }}" = "Windows" ]; then
            certutil -hashfile "$ARCHIVE_NAME.${{ matrix.archive_ext }}" SHA256 | grep -v "^SHA256" | grep -v "^CertUtil" > "$ARCHIVE_NAME.${{ matrix.archive_ext }}.sha256"
          else
            shasum -a 256 "$ARCHIVE_NAME.${{ matrix.archive_ext }}" > "$ARCHIVE_NAME.${{ matrix.archive_ext }}.sha256"
          fi
          echo "CHECKSUM=$ARCHIVE_NAME.${{ matrix.archive_ext }}.sha256" >> $GITHUB_ENV

      # Upload the binary as a release asset
      # - name: Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: |
      #       ${{ env.ASSET }}
      #       ${{ env.CHECKSUM }}
      #     generate_release_notes: true
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      # --- NPM Package Preparation and Publish ---

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: "@edmondfrank"
          token: ${{ secrets.NPM_TOKEN }} # Let setup-node handle authentication

      - name: Prepare npm package directory
        shell: bash
        run: |
          PKG_DIR="npm-release/${{ matrix.target }}"
          mkdir -p "$PKG_DIR"
          # Extract the binary from the archive into the package root as probe or probe.exe
          ARCHIVE="${{ env.ASSET }}"
          BIN_NAME="probe${{ matrix.binary_ext }}"
          if [[ "${{ matrix.archive_ext }}" == "tar.gz" ]]; then
            # List archive contents for debugging
            tar -tzf "$ARCHIVE"
            # Extract the binary (no wildcards, use direct path)
            tar -xzf "$ARCHIVE" -C "$PKG_DIR" --strip-components=1 "$(tar -tzf "$ARCHIVE" | grep "/$BIN_NAME$")"
          elif [[ "${{ matrix.archive_ext }}" == "zip" ]]; then
            unzip -j "$ARCHIVE" "$(unzip -Z1 "$ARCHIVE" | grep "/$BIN_NAME$")" -d "$PKG_DIR"
          fi
          cp "${{ env.CHECKSUM }}" "$PKG_DIR/" || true
          cp README.md "$PKG_DIR/" || true
          cp LICENSE "$PKG_DIR/" || true
          cp ABOUT.MD "$PKG_DIR/" || true

      - name: Generate package.json from template
        shell: bash
        run: |
          PKG_DIR="npm-release/${{ matrix.target }}"
          # Determine version from tag or workflow_dispatch input
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          # Map Rust target triples to npm os/cpu
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu)
              NODE_OS="linux"
              NODE_CPU="x64"
              ;;
            aarch64-unknown-linux-gnu)
              NODE_OS="linux"
              NODE_CPU="arm64"
              ;;
            x86_64-apple-darwin)
              NODE_OS="darwin"
              NODE_CPU="x64"
              ;;
            aarch64-apple-darwin)
              NODE_OS="darwin"
              NODE_CPU="arm64"
              ;;
            x86_64-pc-windows-msvc)
              NODE_OS="win32"
              NODE_CPU="x64"
              ;;
            *)
              echo "Unknown target: ${{ matrix.target }}"
              exit 1
              ;;
          esac

          # Use envsubst to fill in the template
          export node_pkg="@edmondfrank/probe-${NODE_OS}-${NODE_CPU}"
          export version="${VERSION#v}"
          export node_os="${NODE_OS}"
          export node_arch="${NODE_CPU}"
          envsubst < npm-release/package.json.tmpl > "$PKG_DIR/package.json"

      - name: Publish to npm
        shell: bash
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          PKG_DIR="npm-release/${{ matrix.target }}"
          cd "$PKG_DIR"
          npm publish --access public

  publish-meta-package:
    name: Publish Meta NPM Package
    runs-on: ubuntu-latest
    needs: build-and-release
    if: |
      startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
          scope: "@edmondfrank"
          token: ${{ secrets.NPM_TOKEN }} # Let setup-node handle authentication

      - name: Generate meta-package package.json
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          fi
          export version="${VERSION#v}"
          envsubst < package.json > package.json.out
          mv package.json.out package.json

      - name: Publish meta-package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --access public
