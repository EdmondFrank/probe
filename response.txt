# Implementation of the `--symbols` argument for the extract command

To implement the `--symbols` argument for the extract command, I need to make several changes to the codebase. Here's my implementation plan:

## 1. Add `list_symbols_in_file` function to `src/extract/symbol_finder.rs`

This function will parse a file and return a list of all symbols found in it, using the language implementation's `is_acceptable_parent` method to identify symbols.

## 2. Add `symbols` field to `ExtractOptions` in `src/extract/mod.rs`

The `ExtractOptions` struct needs a new boolean field to indicate whether to extract only symbols.

## 3. Update the `Extract` command in `src/cli.rs`

Add a new `--symbols` flag to the `Extract` command in the CLI definition.

## 4. Modify the `handle_extract` function

Update the `handle_extract` function to use the new `list_symbols_in_file` function when the `symbols` option is enabled.

## 5. Update the `process_file_for_extraction` function

Modify the `process_file_for_extraction` function to handle the symbols option.

## Implementation Details

Here's how the implementation would look:

1. First, add the `list_symbols_in_file` function to `src/extract/symbol_finder.rs`:

```rust
/// List all symbols (functions, structs, classes, etc.) in a file
pub fn list_symbols_in_file(
    path: &Path,
    content: &str,
    allow_tests: bool,
) -> Result<Vec<SearchResult>> {
    // Implementation that uses tree-sitter to find all symbols in the file
    // Similar to find_symbol_in_file but returns all symbols instead of just one
}
```

2. Add the `symbols` field to `ExtractOptions` in `src/extract/mod.rs`:

```rust
pub struct ExtractOptions {
    // Existing fields...
    
    /// Whether to extract only symbols
    pub symbols: bool,
}
```

3. Update the `Extract` command in `src/cli.rs`:

```rust
Extract {
    // Existing fields...
    
    /// Extract only symbols (functions, structs, classes, etc.)
    #[arg(long = "symbols")]
    symbols: bool,
}
```

4. Modify the `handle_extract` function to pass the symbols option to the processor.

5. Update the `process_file_for_extraction` function to handle the symbols option:

```rust
pub fn process_file_for_extraction(
    path: &Path,
    start_line: Option<usize>,
    end_line: Option<usize>,
    symbol: Option<&str>,
    allow_tests: bool,
    context_lines: usize,
    specific_lines: Option<&HashSet<usize>>,
    symbols: bool,
) -> Result<Vec<SearchResult>> {
    // If symbols is true, use list_symbols_in_file
    if symbols {
        let content = fs::read_to_string(path)?;
        return list_symbols_in_file(path, &content, allow_tests);
    }
    
    // Existing implementation for other cases...
}
```

## Testing

To test this implementation, I would:

1. Run the command with the `--symbols` flag on various files
2. Verify that it correctly extracts all symbols from the files
3. Test with different languages to ensure it works across language implementations
4. Test with and without the `--allow-tests` flag to ensure it correctly filters test symbols

Example command:
```
probe extract --symbols src/main.rs
```

This should output all the functions, structs, and other symbols defined in the main.rs file.
